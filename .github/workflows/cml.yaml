name: MLOps
on: [push]
jobs:
  run:
    runs-on: [ubuntu-latest]
   
    container: docker://dvcorg/cml-py3:latest
             
    steps:
      - uses: actions/checkout@v2
      - name: "Train my model"
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          # Your ML workflow goes here
          pip install -r requirements.txt
          python train.py 
          apt update
          apt upgrade
          apt -y  install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
          apt update
          apt-cache policy docker-ce
          apt -y install docker-ce
          curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          usermod -a -G docker "$(whoami)"
          newgrp docker
          service --status-all
          service docker start
          docker-compose ps
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      
      - name: Build the docker-compose stack
        run: docker-compose -f docker-compose.yml up -d
      - name: Check running containers
        run: docker ps -a
      - name: Build the docker-compose stack
        run: docker-compose -f docker-compose.yml up -d
      - name: Check running containers
        run: docker ps -a
      - name: setting connector
        run: |
          docker-compose exec -T mongo1 /usr/bin/mongo --eval '''if (rs.status()["ok"] == 0) { rsconf = {
          _id : "rs0",
          members: [
          { _id : 0, host : "mongo1:27017", priority: 1.0 },
          { _id : 1, host : "mongo2:27017", priority: 0.5 },
          { _id : 2, host : "mongo3:27017", priority: 0.5 }
          ]
          };
          rs.initiate(rsconf);
          }
          rs.conf();'''
          
          curl localhost:8083/connector-plugins | jq

          [
          {
          "class": "com.mongodb.kafka.connect.MongoSinkConnector",
          "type": "sink",
          "version": "0.2"
          },
          {
          "class": "com.mongodb.kafka.connect.MongoSourceConnector",
          "type": "source",
          "version": "0.2"
          },
          {
          "class": "io.confluent.connect.gcs.GcsSinkConnector",
          "type": "sink",
          "version": "5.0.1"
          },
          {
          "class": "io.confluent.connect.storage.tools.SchemaSourceConnector",
          "type": "source",
          "version": "2.1.1-cp1"
          },
          {
          "class": "org.apache.kafka.connect.file.FileStreamSinkConnector",
          "type": "sink",
          "version": "2.1.1-cp1"
          },
          {
          "class": "org.apache.kafka.connect.file.FileStreamSourceConnector",
          "type": "source",
          "version": "2.1.1-cp1"
          }
          ]
      - name: testing sinking and sourcing.sh
        run:  |
          chmod +x ./run.sh
          ./run.sh
      - name: run app and request
        #run: npx jest ${{ matrix['test-file'] }}
        run: |
          python app.py &
          python request.py &
      #- name: run requeste
       # run: python request.py
      
